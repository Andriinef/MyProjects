""" Task 1: Encode function
    Task 2: Decode function

"""
from codewars_test import assert_equals


# def encode(string):
#     bin_i = [f'{ord(i):b}' for i in string]     # string переводим перевором в bin и выводим без 0b
#     bin_z = [b.zfill(8) for b in bin_i]         # добавляет нули (0) в начало строки, пока не достигнет указанной длины
#     f_str = ''.join(bin_z)                      # cоединяем все bin_i элементы кортежа в строку
#     bits = f_str.replace('0', '000').replace('1', '111')     # заменяем указанную фразу другой указанной фразой
#     return bits
#
#
# def decode(bits):
#     x = 3
#     res = [bits[y - x:y] for y in range(x, len(bits) + x, x)]
#     decoded = ""
#     for i in res:
#         sorti = sorted(i)
#         decoded += sorti[1]
#     x = 8
#     bin_i = [decoded[y - x:y] for y in range(x, len(decoded) + x, x)]
#     return "".join([chr(int(x, 2)) for x in bin_i])


def encode(string):
    values = "".join(format(x, "08b") for x in map(ord, string))
    return values.replace("0", "000").replace("1", "111")


""" Функция ord() возвращает целое число, представляющее символ Unicode.
    Функция map() применяет заданную функцию к каждому 
    элементу итерируемого объекта 
    (список, кортеж и т. д.) и возвращает итератор
"""


def decode(bits):
    bs = "".join("0" if xs.count("0") >= 2 else "1" for xs in zip(*[iter(bits)] * 3))
    return "".join(chr(int("".join(b), 2)) for b in zip(*[iter(bs)] * 8))


test0 = assert_equals(encode("hey"), "000111111000111000000000000111111000000111000111000111111111111000000111")
test1 = assert_equals(encode("The Sensei told me that i can do this kata"),
                      "000111000111000111000000000111111000111000000000000111111000000111000111000000111000000000000000000111000111000000111111000111111000000111000111000111111000111111111000000111111111000000111111000111111000000111000111000111111000111000000111000000111000000000000000000111111111000111000000000111111000111111111111000111111000111111000000000111111000000111000000000000111000000000000000000111111000111111000111000111111000000111000111000000111000000000000000000111111111000111000000000111111000111000000000000111111000000000000111000111111111000111000000000000111000000000000000000111111000111000000111000000111000000000000000000111111000000000111111000111111000000000000111000111111000111111111000000000111000000000000000000111111000000111000000000111111000111111111111000000111000000000000000000111111111000111000000000111111000111000000000000111111000111000000111000111111111000000111111000000111000000000000000000111111000111000111111000111111000000000000111000111111111000111000000000111111000000000000111")
test2 = assert_equals(encode("T3st"),
                      "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000")
test3 = assert_equals(encode("T?st!%"),
                      "000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111")

test4 = assert_equals(decode("100111111000111001000010000111111000000111001111000111110110111000010111"), "hey")
test5 = assert_equals(decode(

                      "The Sensei told me that i can do this kata")
test6 = assert_equals(
    decode("000111000111000111000010000000111111000000111111000111111111000000111111000111111111000111010000"), "T3st")
test7 = assert_equals(decode(
    "000111000111000111000001000000111111110111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111"),
                      "T?st!%")
