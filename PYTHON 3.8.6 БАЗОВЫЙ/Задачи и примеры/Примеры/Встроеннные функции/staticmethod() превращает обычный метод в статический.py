""" staticmethod() превращает обычный метод в статический
"""


# Статические методы класса объявляются
# с помощью декоратора @staticmethod.
# В статические методы не передаётся
# ни объект-экземпляр, ни объект-класс.
# Этот класс не имеет статических методов.
class A:
    def __init__(self):
        self.prop = 0

    def func0(self):
        print(self.prop)

    def func1(self):
        print(self)


a = A()
# В качестве первого аргумента передаётся
# объект-экземпляр a
a.func0()  # 0
a.func1()  # <__main__.A object at 0x7f8abd437208>

# Если обычный метод вызвать на класс,
# то объект-класс не передаётся
# в качестве первого аргумента.
# В данном случае функция ждёт один аргумент,
# а мы ничего ей не передаём.
# A.func1() - ERROR

# Но мы можем что-то передать "вручную",
# даже не объект-экземпляр этого класса.
A.func1(6)  # 6

# Несмотря на то, что в классе нет статических методов,
# с помощью функции staticmethod() мы можем
# превратить обычный метод (или функцию) в статический.
A.func1 = staticmethod(A.func1)
# Статический метод класса можно вызывать
# как на класс, так и на экземпляр.
# В любом случае ни класс,
# ни объект в нее не передаются.
A.func1(5)  # 5
a.func1(8)  # 8


# Статический метод ожидает явной передачи аргументов
# a.func1() - ERROR


def func(n):
    print(n)


# В статический метод класса можно
# превратить обычную функцию
A.func2 = staticmethod(func)
A.func2(10)  # 10
a.func2(20)  # 20
# 0
# <__main__.A object at 0x7f8abd437208>
# 6
# 5
# 8
# 10
# 20
